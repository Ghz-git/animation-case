{"file":"useRequest-FImzQkjq.js","mappings":"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","names":[],"sources":["../../../../node_modules/element-plus/es/components/loading/index.mjs","../../../../src/composables/useRequest.js"],"sourcesContent":["import { Loading } from './src/service.mjs';\nexport { Loading as ElLoadingService } from './src/service.mjs';\nimport { vLoading } from './src/directive.mjs';\nexport { vLoading as ElLoadingDirective, vLoading } from './src/directive.mjs';\nimport './src/types.mjs';\n\nconst ElLoading = {\n  install(app) {\n    app.directive(\"loading\", vLoading);\n    app.config.globalProperties.$loading = Loading;\n  },\n  directive: vLoading,\n  service: Loading\n};\n\nexport { ElLoading, ElLoading as default };\n//# sourceMappingURL=index.mjs.map\n","import { ElMessage, ElLoading } from 'element-plus'\r\nimport { useAppConfig } from 'nuxt/app';\r\nimport { useUserInfo, useUserToken } from \"@/store/user\"\r\n\r\nexport const useRequest = async (url, options) => {\r\n        const userToken = useUserToken()\r\n\r\n        // 设置headers\r\n        const headers = {\r\n          ['X-Mc-Token']: userToken.token\r\n        }\r\n        const config = useAppConfig();\r\n        const defaultOptions = {\r\n                baseURL: config.public.baseUrl,\r\n                headers: headers,\r\n                watch: false,\r\n                //响应拦截\r\n                onResponse({ response }) {\r\n                        if (response.ok) {\r\n                                const res = response._data\r\n                                // 根据配置 自动弹出提示\r\n                                if (res.code === '200' || res.code === '0') {\r\n                                        if (options.msg) {\r\n                                                ElMessage.success(res.msg)\r\n                                        }\r\n                                } else if (res.code === '401') {\r\n                                        ElMessage.warning(\"Login Timeout, Please Login Again!\");\r\n                                        useUserToken().setToken('')\r\n                                        useUserInfo().setInfo({})\r\n                                        nuxtTo('/login')\r\n                                        return Promise.reject(res.msg)\r\n                                } else {\r\n                                        ElMessage.warning(res.msg);\r\n                                        return Promise.reject(res.msg)\r\n                                }\r\n                        } else {\r\n                                // 弹出错误\r\n                                ElMessage({\r\n                                        type: 'error',\r\n                                        message: response.statusText,\r\n                                        grouping: true,\r\n                                })\r\n                                options.loading ? loadingInstance.close() : ''\r\n                                return Promise.reject(response.statusText)\r\n                        }\r\n                },\r\n                // 请求错误\r\n                onRequestError({ error }) {\r\n                        ElMessage({\r\n                                type: 'error',\r\n                                message: error?.toString(),\r\n                                grouping: true,\r\n                        })\r\n                        return Promise.reject(error)\r\n                },\r\n        }\r\n        const newOptions = { ...defaultOptions, ...options }\r\n        // 根据配置 判断是否需要显示loading\r\n        const loadingInstance = options.loading\r\n                ? ElLoading.service({\r\n                          lock: true,\r\n                          text: 'Loading',\r\n                          background: 'rgba(0, 0, 0, 0.7)',\r\n                          customClass: 'loading',\r\n                  })\r\n                : ''\r\n        return $fetch(url, newOptions)\r\n                .then((res) => {\r\n                        if (loadingInstance) {\r\n                                loadingInstance.close()\r\n                        }\r\n                        return Promise.resolve(res)\r\n                })\r\n                .catch((error) => {\r\n                        if (loadingInstance) {\r\n                                loadingInstance.close()\r\n                        }\r\n                        return Promise.reject(error)\r\n                })\r\n        // return { data, refresh };\r\n}\r\n\r\nexport const get = (url, data = {}, data2 = {},options) => {\r\n        const params = { ...data, ...data2 }\r\n        let paramsArray = []\r\n        //拼接参数\r\n        Object.keys(params).forEach((key) => paramsArray.push(key + '=' + params[key]))\r\n        if (url.search(/\\?/) === -1) {\r\n                url += '?' + paramsArray.join('&')\r\n        } else {\r\n                url += '&' + paramsArray.join('&')\r\n        }\r\n\r\n        return useRequest(url, {\r\n                method: 'GET',\r\n                ...options,\r\n        })\r\n}\r\n\r\nexport const post = (url, data = {},data2 = {}, options = {}) => {\r\n        return useRequest(url, {\r\n                method: 'POST',\r\n                body: { ...data, ...data2 },\r\n                ...options\r\n        })\r\n}\r\n"],"version":3}