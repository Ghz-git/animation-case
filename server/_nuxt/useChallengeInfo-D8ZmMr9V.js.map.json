{"file":"useChallengeInfo-D8ZmMr9V.js","mappings":"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","names":["_isEmpty"],"sources":["../../../../src/hooks/useChallengeInfo.js"],"sourcesContent":["import { ref } from 'vue'\r\nimport { getChallengeInfo } from '@/api/challenge'\r\nimport { CHALLENGES_PLAN } from '@/data/challengesData'\r\nimport { formatNumberWithCurrency, multiply } from '@/utils/tools'\r\nimport { useChallenges } from '@/store/challenges'\r\n\r\nexport const useChallengeInfo = () => {\r\n        const challengesData = ref({\r\n                title: \"\",\r\n                accountSize: \"\",\r\n                stages: \"\",\r\n                profits: \"\",\r\n                highest: \"\",\r\n                noLimit: \"\",\r\n                start: \"\",\r\n                list: []\r\n        })\r\n        const isEmptyData = ref(true)\r\n        const getChallengeInfoHooks = async (fnc) => {\r\n                try {\r\n                        const { data } = await getChallengeInfo() || {};\r\n                        const filteredData = data.filter(item => item.accountType === \"MFT\");\r\n                        const levelToChallengeMap = {};\r\n                        CHALLENGES_PLAN.list.forEach((challenge, index) => {\r\n                                levelToChallengeMap[challenge.level] = index;\r\n                        });\r\n                        for (const item of filteredData) {\r\n                                const challengeIndex = levelToChallengeMap[item.level];\r\n                                if (challengeIndex !== undefined) {\r\n                                        const challenge = CHALLENGES_PLAN.list[challengeIndex];\r\n                                        challenge.amount = formatNumberWithCurrency(item.initialAmount, 0);\r\n                                        challenge.payment = formatNumberWithCurrency(item.enrollmentFee, 0);\r\n                                        challenge.enrollmentFee = Number(item.enrollmentFee);\r\n                                        challenge.uid = item.uid;\r\n                                        challenge.platformName = item.platformName;\r\n                                        challenge.accountType = item.accountType;\r\n                                        challenge.accountLeverage = item.accountLeverage;\r\n                                        challenge.discountEnrollmentFee = item.discountEnrollmentFee;\r\n                                        challenge.settlementCurrency = item.settlementCurrency;\r\n                                        challenge.showHotLable = item.showHotLable;\r\n                                        const updateContent = (key, values, formatter = value => value) => {\r\n                                                for (const [d, value] of values.entries()) {\r\n                                                        if (value !== \"null\") {\r\n                                                                const formattedValue = formatter(value);\r\n                                                                const current = challenge.levelList[d].children.find(child => child.key === key);\r\n                                                                if (current) current.content = formattedValue;\r\n                                                        }\r\n                                                }\r\n                                        };\r\n                                        // 利潤目標\r\n                                        updateContent(1, item.profitTarget.split(','), value => {\r\n                                                const profitPercentage = parseFloat(value);\r\n                                                return `${profitPercentage}%(${formatNumberWithCurrency(multiply(profitPercentage / 100, item.initialAmount), 0)})`;\r\n                                        });\r\n                                        //  每日最大回撤\r\n                                        updateContent(2, item.dailyDrawdown.split(','), value => {\r\n                                                const ddPercentage = parseFloat(value);\r\n                                                return `${ddPercentage}%(${formatNumberWithCurrency(multiply(ddPercentage / 100, item.initialAmount), 0)})`;\r\n                                        });\r\n                                        //  历史最大回撤\r\n                                        updateContent(3, item.maxDrawdown.split(','), value => {\r\n                                                const mdPercentage = parseFloat(value);\r\n                                                return `${mdPercentage}%(${formatNumberWithCurrency(multiply(mdPercentage / 100, item.initialAmount), 0)})`;\r\n                                        });\r\n                                        //  有效挑戰天數\r\n                                        updateContent(4, item.validTradingDays.split(','));\r\n                                        //  有效挑戰天數的下單次數\r\n                                        updateContent(5, item.minTransactionTimes.split(','));\r\n                                        //  續費挑戰\r\n                                        updateContent(7, item.renewSignUpCost.split(','), value => formatNumberWithCurrency(value, 0));\r\n                                        //  交易分潤比例\r\n                                        updateContent(8, item.profitSharingRatio.split(','), value => `${value}%`);\r\n                                }\r\n                        }\r\n                        challengesData.value = CHALLENGES_PLAN\r\n                        useChallenges().setData(CHALLENGES_PLAN)\r\n                } catch (err) {\r\n                        challengesData.value = useChallenges().getData()\r\n                }\r\n                isEmptyData.value = _isEmpty(challengesData.value)\r\n                fnc()\r\n        }\r\n        return { challengesData, isEmptyData, getChallengeInfoHooks }\r\n}"],"version":3}